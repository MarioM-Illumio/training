// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewChangeBalanceParams creates a new ChangeBalanceParams object
// with the default values initialized.
func NewChangeBalanceParams() *ChangeBalanceParams {
	var ()
	return &ChangeBalanceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeBalanceParamsWithTimeout creates a new ChangeBalanceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeBalanceParamsWithTimeout(timeout time.Duration) *ChangeBalanceParams {
	var ()
	return &ChangeBalanceParams{

		timeout: timeout,
	}
}

// NewChangeBalanceParamsWithContext creates a new ChangeBalanceParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeBalanceParamsWithContext(ctx context.Context) *ChangeBalanceParams {
	var ()
	return &ChangeBalanceParams{

		Context: ctx,
	}
}

// NewChangeBalanceParamsWithHTTPClient creates a new ChangeBalanceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeBalanceParamsWithHTTPClient(client *http.Client) *ChangeBalanceParams {
	var ()
	return &ChangeBalanceParams{
		HTTPClient: client,
	}
}

/*ChangeBalanceParams contains all the parameters to send to the API endpoint
for the change balance operation typically these are written to a http.Request
*/
type ChangeBalanceParams struct {

	/*Delta
	  The amount to change the balance by (+/-)

	*/
	Delta float64
	/*Number
	  Account number

	*/
	Number int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change balance params
func (o *ChangeBalanceParams) WithTimeout(timeout time.Duration) *ChangeBalanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change balance params
func (o *ChangeBalanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change balance params
func (o *ChangeBalanceParams) WithContext(ctx context.Context) *ChangeBalanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change balance params
func (o *ChangeBalanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change balance params
func (o *ChangeBalanceParams) WithHTTPClient(client *http.Client) *ChangeBalanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change balance params
func (o *ChangeBalanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDelta adds the delta to the change balance params
func (o *ChangeBalanceParams) WithDelta(delta float64) *ChangeBalanceParams {
	o.SetDelta(delta)
	return o
}

// SetDelta adds the delta to the change balance params
func (o *ChangeBalanceParams) SetDelta(delta float64) {
	o.Delta = delta
}

// WithNumber adds the number to the change balance params
func (o *ChangeBalanceParams) WithNumber(number int64) *ChangeBalanceParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the change balance params
func (o *ChangeBalanceParams) SetNumber(number int64) {
	o.Number = number
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeBalanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param delta
	if err := r.SetPathParam("delta", swag.FormatFloat64(o.Delta)); err != nil {
		return err
	}

	// path param number
	if err := r.SetPathParam("number", swag.FormatInt64(o.Number)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
