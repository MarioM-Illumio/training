// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	model "github.com/tetrateio/training/samples/modernbank/microservices/user/pkg/model"
)

// UpdateUserHandlerFunc turns a function with the right signature into a update user handler
type UpdateUserHandlerFunc func(UpdateUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateUserHandlerFunc) Handle(params UpdateUserParams) middleware.Responder {
	return fn(params)
}

// UpdateUserHandler interface for that can handle valid update user params
type UpdateUserHandler interface {
	Handle(UpdateUserParams) middleware.Responder
}

// NewUpdateUser creates a new http.Handler for the update user operation
func NewUpdateUser(ctx *middleware.Context, handler UpdateUserHandler) *UpdateUser {
	return &UpdateUser{Context: ctx, Handler: handler}
}

/*UpdateUser swagger:route PUT /users/{username} users updateUser

Update user

Update user by username.

*/
type UpdateUser struct {
	Context *middleware.Context
	Handler UpdateUserHandler
}

func (o *UpdateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateUserOKBody update user o k body
// swagger:model UpdateUserOKBody
type UpdateUserOKBody struct {
	model.User

	model.Version
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateUserOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateUserOKBodyAO0
	var updateUserOKBodyAO0 model.User
	if err := swag.ReadJSON(raw, &updateUserOKBodyAO0); err != nil {
		return err
	}
	o.User = updateUserOKBodyAO0

	// UpdateUserOKBodyAO1
	var updateUserOKBodyAO1 model.Version
	if err := swag.ReadJSON(raw, &updateUserOKBodyAO1); err != nil {
		return err
	}
	o.Version = updateUserOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateUserOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	updateUserOKBodyAO0, err := swag.WriteJSON(o.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateUserOKBodyAO0)

	updateUserOKBodyAO1, err := swag.WriteJSON(o.Version)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateUserOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update user o k body
func (o *UpdateUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.User
	if err := o.User.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with model.Version
	if err := o.Version.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
