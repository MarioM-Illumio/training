// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MakeTransactionHandlerFunc turns a function with the right signature into a make transaction handler
type MakeTransactionHandlerFunc func(MakeTransactionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MakeTransactionHandlerFunc) Handle(params MakeTransactionParams) middleware.Responder {
	return fn(params)
}

// MakeTransactionHandler interface for that can handle valid make transaction params
type MakeTransactionHandler interface {
	Handle(MakeTransactionParams) middleware.Responder
}

// NewMakeTransaction creates a new http.Handler for the make transaction operation
func NewMakeTransaction(ctx *middleware.Context, handler MakeTransactionHandler) *MakeTransaction {
	return &MakeTransaction{Context: ctx, Handler: handler}
}

/*MakeTransaction swagger:route POST /transactions transactions makeTransaction

Sends money from one account to another

Sends money from one account to another

*/
type MakeTransaction struct {
	Context *middleware.Context
	Handler MakeTransactionHandler
}

func (o *MakeTransaction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMakeTransactionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
