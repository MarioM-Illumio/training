// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/tetrateio/training/samples/modernbank/microservices/transaction-log/pkg/model"
)

// GetTransactionReceivedReader is a Reader for the GetTransactionReceived structure.
type GetTransactionReceivedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReceivedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionReceivedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetTransactionReceivedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTransactionReceivedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionReceivedOK creates a GetTransactionReceivedOK with default headers values
func NewGetTransactionReceivedOK() *GetTransactionReceivedOK {
	return &GetTransactionReceivedOK{}
}

/*GetTransactionReceivedOK handles this case with default header values.

Success!
*/
type GetTransactionReceivedOK struct {
	Payload *GetTransactionReceivedOKBody
}

func (o *GetTransactionReceivedOK) Error() string {
	return fmt.Sprintf("[GET /account/{receiver}/received/{transaction}][%d] getTransactionReceivedOK  %+v", 200, o.Payload)
}

func (o *GetTransactionReceivedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionReceivedOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionReceivedNotFound creates a GetTransactionReceivedNotFound with default headers values
func NewGetTransactionReceivedNotFound() *GetTransactionReceivedNotFound {
	return &GetTransactionReceivedNotFound{}
}

/*GetTransactionReceivedNotFound handles this case with default header values.

Transaction not found
*/
type GetTransactionReceivedNotFound struct {
}

func (o *GetTransactionReceivedNotFound) Error() string {
	return fmt.Sprintf("[GET /account/{receiver}/received/{transaction}][%d] getTransactionReceivedNotFound ", 404)
}

func (o *GetTransactionReceivedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTransactionReceivedInternalServerError creates a GetTransactionReceivedInternalServerError with default headers values
func NewGetTransactionReceivedInternalServerError() *GetTransactionReceivedInternalServerError {
	return &GetTransactionReceivedInternalServerError{}
}

/*GetTransactionReceivedInternalServerError handles this case with default header values.

Internal server error
*/
type GetTransactionReceivedInternalServerError struct {
}

func (o *GetTransactionReceivedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /account/{receiver}/received/{transaction}][%d] getTransactionReceivedInternalServerError ", 500)
}

func (o *GetTransactionReceivedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetTransactionReceivedOKBody get transaction received o k body
swagger:model GetTransactionReceivedOKBody
*/
type GetTransactionReceivedOKBody struct {
	model.Transaction

	model.Version
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTransactionReceivedOKBody) UnmarshalJSON(raw []byte) error {
	// GetTransactionReceivedOKBodyAO0
	var getTransactionReceivedOKBodyAO0 model.Transaction
	if err := swag.ReadJSON(raw, &getTransactionReceivedOKBodyAO0); err != nil {
		return err
	}
	o.Transaction = getTransactionReceivedOKBodyAO0

	// GetTransactionReceivedOKBodyAO1
	var getTransactionReceivedOKBodyAO1 model.Version
	if err := swag.ReadJSON(raw, &getTransactionReceivedOKBodyAO1); err != nil {
		return err
	}
	o.Version = getTransactionReceivedOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTransactionReceivedOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getTransactionReceivedOKBodyAO0, err := swag.WriteJSON(o.Transaction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionReceivedOKBodyAO0)

	getTransactionReceivedOKBodyAO1, err := swag.WriteJSON(o.Version)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionReceivedOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get transaction received o k body
func (o *GetTransactionReceivedOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.Transaction
	if err := o.Transaction.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with model.Version
	if err := o.Version.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionReceivedOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionReceivedOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionReceivedOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
