// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTransactionReceivedParams creates a new GetTransactionReceivedParams object
// with the default values initialized.
func NewGetTransactionReceivedParams() *GetTransactionReceivedParams {
	var ()
	return &GetTransactionReceivedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionReceivedParamsWithTimeout creates a new GetTransactionReceivedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTransactionReceivedParamsWithTimeout(timeout time.Duration) *GetTransactionReceivedParams {
	var ()
	return &GetTransactionReceivedParams{

		timeout: timeout,
	}
}

// NewGetTransactionReceivedParamsWithContext creates a new GetTransactionReceivedParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTransactionReceivedParamsWithContext(ctx context.Context) *GetTransactionReceivedParams {
	var ()
	return &GetTransactionReceivedParams{

		Context: ctx,
	}
}

// NewGetTransactionReceivedParamsWithHTTPClient creates a new GetTransactionReceivedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTransactionReceivedParamsWithHTTPClient(client *http.Client) *GetTransactionReceivedParams {
	var ()
	return &GetTransactionReceivedParams{
		HTTPClient: client,
	}
}

/*GetTransactionReceivedParams contains all the parameters to send to the API endpoint
for the get transaction received operation typically these are written to a http.Request
*/
type GetTransactionReceivedParams struct {

	/*Receiver
	  Account number that received the transactions

	*/
	Receiver int64
	/*Transaction
	  Transaction ID

	*/
	Transaction string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get transaction received params
func (o *GetTransactionReceivedParams) WithTimeout(timeout time.Duration) *GetTransactionReceivedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transaction received params
func (o *GetTransactionReceivedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transaction received params
func (o *GetTransactionReceivedParams) WithContext(ctx context.Context) *GetTransactionReceivedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transaction received params
func (o *GetTransactionReceivedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transaction received params
func (o *GetTransactionReceivedParams) WithHTTPClient(client *http.Client) *GetTransactionReceivedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transaction received params
func (o *GetTransactionReceivedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReceiver adds the receiver to the get transaction received params
func (o *GetTransactionReceivedParams) WithReceiver(receiver int64) *GetTransactionReceivedParams {
	o.SetReceiver(receiver)
	return o
}

// SetReceiver adds the receiver to the get transaction received params
func (o *GetTransactionReceivedParams) SetReceiver(receiver int64) {
	o.Receiver = receiver
}

// WithTransaction adds the transaction to the get transaction received params
func (o *GetTransactionReceivedParams) WithTransaction(transaction string) *GetTransactionReceivedParams {
	o.SetTransaction(transaction)
	return o
}

// SetTransaction adds the transaction to the get transaction received params
func (o *GetTransactionReceivedParams) SetTransaction(transaction string) {
	o.Transaction = transaction
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionReceivedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param receiver
	if err := r.SetPathParam("receiver", swag.FormatInt64(o.Receiver)); err != nil {
		return err
	}

	// path param transaction
	if err := r.SetPathParam("transaction", o.Transaction); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
