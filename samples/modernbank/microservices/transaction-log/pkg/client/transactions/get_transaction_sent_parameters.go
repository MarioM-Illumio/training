// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTransactionSentParams creates a new GetTransactionSentParams object
// with the default values initialized.
func NewGetTransactionSentParams() *GetTransactionSentParams {
	var ()
	return &GetTransactionSentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionSentParamsWithTimeout creates a new GetTransactionSentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTransactionSentParamsWithTimeout(timeout time.Duration) *GetTransactionSentParams {
	var ()
	return &GetTransactionSentParams{

		timeout: timeout,
	}
}

// NewGetTransactionSentParamsWithContext creates a new GetTransactionSentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTransactionSentParamsWithContext(ctx context.Context) *GetTransactionSentParams {
	var ()
	return &GetTransactionSentParams{

		Context: ctx,
	}
}

// NewGetTransactionSentParamsWithHTTPClient creates a new GetTransactionSentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTransactionSentParamsWithHTTPClient(client *http.Client) *GetTransactionSentParams {
	var ()
	return &GetTransactionSentParams{
		HTTPClient: client,
	}
}

/*GetTransactionSentParams contains all the parameters to send to the API endpoint
for the get transaction sent operation typically these are written to a http.Request
*/
type GetTransactionSentParams struct {

	/*Sender
	  Account number that made the transactions

	*/
	Sender int64
	/*Transaction
	  Transaction ID

	*/
	Transaction int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get transaction sent params
func (o *GetTransactionSentParams) WithTimeout(timeout time.Duration) *GetTransactionSentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transaction sent params
func (o *GetTransactionSentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transaction sent params
func (o *GetTransactionSentParams) WithContext(ctx context.Context) *GetTransactionSentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transaction sent params
func (o *GetTransactionSentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transaction sent params
func (o *GetTransactionSentParams) WithHTTPClient(client *http.Client) *GetTransactionSentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transaction sent params
func (o *GetTransactionSentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSender adds the sender to the get transaction sent params
func (o *GetTransactionSentParams) WithSender(sender int64) *GetTransactionSentParams {
	o.SetSender(sender)
	return o
}

// SetSender adds the sender to the get transaction sent params
func (o *GetTransactionSentParams) SetSender(sender int64) {
	o.Sender = sender
}

// WithTransaction adds the transaction to the get transaction sent params
func (o *GetTransactionSentParams) WithTransaction(transaction int64) *GetTransactionSentParams {
	o.SetTransaction(transaction)
	return o
}

// SetTransaction adds the transaction to the get transaction sent params
func (o *GetTransactionSentParams) SetTransaction(transaction int64) {
	o.Transaction = transaction
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionSentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sender
	if err := r.SetPathParam("sender", swag.FormatInt64(o.Sender)); err != nil {
		return err
	}

	// path param transaction
	if err := r.SetPathParam("transaction", swag.FormatInt64(o.Transaction)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
