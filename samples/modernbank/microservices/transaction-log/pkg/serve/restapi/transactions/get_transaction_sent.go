// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	model "github.com/tetrateio/training/samples/modernbank/microservices/transaction-log/pkg/model"
)

// GetTransactionSentHandlerFunc turns a function with the right signature into a get transaction sent handler
type GetTransactionSentHandlerFunc func(GetTransactionSentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionSentHandlerFunc) Handle(params GetTransactionSentParams) middleware.Responder {
	return fn(params)
}

// GetTransactionSentHandler interface for that can handle valid get transaction sent params
type GetTransactionSentHandler interface {
	Handle(GetTransactionSentParams) middleware.Responder
}

// NewGetTransactionSent creates a new http.Handler for the get transaction sent operation
func NewGetTransactionSent(ctx *middleware.Context, handler GetTransactionSentHandler) *GetTransactionSent {
	return &GetTransactionSent{Context: ctx, Handler: handler}
}

/*GetTransactionSent swagger:route GET /account/{sender}/sent/{transaction} transactions getTransactionSent

Get a specific transaction sent from a given account

Get a specific transaction sent from a given account

*/
type GetTransactionSent struct {
	Context *middleware.Context
	Handler GetTransactionSentHandler
}

func (o *GetTransactionSent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTransactionSentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTransactionSentOKBody get transaction sent o k body
// swagger:model GetTransactionSentOKBody
type GetTransactionSentOKBody struct {
	model.Transaction

	model.Version
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTransactionSentOKBody) UnmarshalJSON(raw []byte) error {
	// GetTransactionSentOKBodyAO0
	var getTransactionSentOKBodyAO0 model.Transaction
	if err := swag.ReadJSON(raw, &getTransactionSentOKBodyAO0); err != nil {
		return err
	}
	o.Transaction = getTransactionSentOKBodyAO0

	// GetTransactionSentOKBodyAO1
	var getTransactionSentOKBodyAO1 model.Version
	if err := swag.ReadJSON(raw, &getTransactionSentOKBodyAO1); err != nil {
		return err
	}
	o.Version = getTransactionSentOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTransactionSentOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getTransactionSentOKBodyAO0, err := swag.WriteJSON(o.Transaction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionSentOKBodyAO0)

	getTransactionSentOKBodyAO1, err := swag.WriteJSON(o.Version)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionSentOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get transaction sent o k body
func (o *GetTransactionSentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.Transaction
	if err := o.Transaction.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with model.Version
	if err := o.Version.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionSentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionSentOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionSentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
