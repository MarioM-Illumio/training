// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	model "github.com/tetrateio/training/samples/modernbank/microservices/transaction-log/pkg/model"
)

// GetTransactionReceivedHandlerFunc turns a function with the right signature into a get transaction received handler
type GetTransactionReceivedHandlerFunc func(GetTransactionReceivedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionReceivedHandlerFunc) Handle(params GetTransactionReceivedParams) middleware.Responder {
	return fn(params)
}

// GetTransactionReceivedHandler interface for that can handle valid get transaction received params
type GetTransactionReceivedHandler interface {
	Handle(GetTransactionReceivedParams) middleware.Responder
}

// NewGetTransactionReceived creates a new http.Handler for the get transaction received operation
func NewGetTransactionReceived(ctx *middleware.Context, handler GetTransactionReceivedHandler) *GetTransactionReceived {
	return &GetTransactionReceived{Context: ctx, Handler: handler}
}

/*GetTransactionReceived swagger:route GET /account/{receiver}/received/{transaction} transactions getTransactionReceived

Get a specific transaction received by a given account

Get a specific transaction received by a given account

*/
type GetTransactionReceived struct {
	Context *middleware.Context
	Handler GetTransactionReceivedHandler
}

func (o *GetTransactionReceived) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTransactionReceivedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTransactionReceivedOKBody get transaction received o k body
// swagger:model GetTransactionReceivedOKBody
type GetTransactionReceivedOKBody struct {
	model.Transaction

	model.Version
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTransactionReceivedOKBody) UnmarshalJSON(raw []byte) error {
	// GetTransactionReceivedOKBodyAO0
	var getTransactionReceivedOKBodyAO0 model.Transaction
	if err := swag.ReadJSON(raw, &getTransactionReceivedOKBodyAO0); err != nil {
		return err
	}
	o.Transaction = getTransactionReceivedOKBodyAO0

	// GetTransactionReceivedOKBodyAO1
	var getTransactionReceivedOKBodyAO1 model.Version
	if err := swag.ReadJSON(raw, &getTransactionReceivedOKBodyAO1); err != nil {
		return err
	}
	o.Version = getTransactionReceivedOKBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTransactionReceivedOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getTransactionReceivedOKBodyAO0, err := swag.WriteJSON(o.Transaction)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionReceivedOKBodyAO0)

	getTransactionReceivedOKBodyAO1, err := swag.WriteJSON(o.Version)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTransactionReceivedOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get transaction received o k body
func (o *GetTransactionReceivedOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.Transaction
	if err := o.Transaction.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with model.Version
	if err := o.Version.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionReceivedOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionReceivedOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionReceivedOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
