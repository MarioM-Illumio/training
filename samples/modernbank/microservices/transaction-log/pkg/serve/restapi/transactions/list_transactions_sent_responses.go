// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	model "github.com/tetrateio/training/samples/modernbank/microservices/transaction-log/pkg/model"
)

// ListTransactionsSentOKCode is the HTTP code returned for type ListTransactionsSentOK
const ListTransactionsSentOKCode int = 200

/*ListTransactionsSentOK Success!

swagger:response listTransactionsSentOK
*/
type ListTransactionsSentOK struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`

	/*
	  In: Body
	*/
	Payload []*model.Transaction `json:"body,omitempty"`
}

// NewListTransactionsSentOK creates ListTransactionsSentOK with default headers values
func NewListTransactionsSentOK() *ListTransactionsSentOK {

	return &ListTransactionsSentOK{}
}

// WithVersion adds the version to the list transactions sent o k response
func (o *ListTransactionsSentOK) WithVersion(version string) *ListTransactionsSentOK {
	o.Version = version
	return o
}

// SetVersion sets the version to the list transactions sent o k response
func (o *ListTransactionsSentOK) SetVersion(version string) {
	o.Version = version
}

// WithPayload adds the payload to the list transactions sent o k response
func (o *ListTransactionsSentOK) WithPayload(payload []*model.Transaction) *ListTransactionsSentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list transactions sent o k response
func (o *ListTransactionsSentOK) SetPayload(payload []*model.Transaction) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTransactionsSentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*model.Transaction, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ListTransactionsSentNotFoundCode is the HTTP code returned for type ListTransactionsSentNotFound
const ListTransactionsSentNotFoundCode int = 404

/*ListTransactionsSentNotFound No transactions found

swagger:response listTransactionsSentNotFound
*/
type ListTransactionsSentNotFound struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`
}

// NewListTransactionsSentNotFound creates ListTransactionsSentNotFound with default headers values
func NewListTransactionsSentNotFound() *ListTransactionsSentNotFound {

	return &ListTransactionsSentNotFound{}
}

// WithVersion adds the version to the list transactions sent not found response
func (o *ListTransactionsSentNotFound) WithVersion(version string) *ListTransactionsSentNotFound {
	o.Version = version
	return o
}

// SetVersion sets the version to the list transactions sent not found response
func (o *ListTransactionsSentNotFound) SetVersion(version string) {
	o.Version = version
}

// WriteResponse to the client
func (o *ListTransactionsSentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// ListTransactionsSentInternalServerErrorCode is the HTTP code returned for type ListTransactionsSentInternalServerError
const ListTransactionsSentInternalServerErrorCode int = 500

/*ListTransactionsSentInternalServerError Internal server error

swagger:response listTransactionsSentInternalServerError
*/
type ListTransactionsSentInternalServerError struct {
	/*Version of the microservice that responded

	 */
	Version string `json:"version"`
}

// NewListTransactionsSentInternalServerError creates ListTransactionsSentInternalServerError with default headers values
func NewListTransactionsSentInternalServerError() *ListTransactionsSentInternalServerError {

	return &ListTransactionsSentInternalServerError{}
}

// WithVersion adds the version to the list transactions sent internal server error response
func (o *ListTransactionsSentInternalServerError) WithVersion(version string) *ListTransactionsSentInternalServerError {
	o.Version = version
	return o
}

// SetVersion sets the version to the list transactions sent internal server error response
func (o *ListTransactionsSentInternalServerError) SetVersion(version string) {
	o.Version = version
}

// WriteResponse to the client
func (o *ListTransactionsSentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header version

	version := o.Version
	if version != "" {
		rw.Header().Set("version", version)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
