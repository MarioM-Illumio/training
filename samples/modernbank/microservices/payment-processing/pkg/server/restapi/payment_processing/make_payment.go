// Code generated by go-swagger; DO NOT EDIT.

package payment_processing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MakePaymentHandlerFunc turns a function with the right signature into a make payment handler
type MakePaymentHandlerFunc func(MakePaymentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MakePaymentHandlerFunc) Handle(params MakePaymentParams) middleware.Responder {
	return fn(params)
}

// MakePaymentHandler interface for that can handle valid make payment params
type MakePaymentHandler interface {
	Handle(MakePaymentParams) middleware.Responder
}

// NewMakePayment creates a new http.Handler for the make payment operation
func NewMakePayment(ctx *middleware.Context, handler MakePaymentHandler) *MakePayment {
	return &MakePayment{Context: ctx, Handler: handler}
}

/*MakePayment swagger:route POST /payment paymentProcessing makePayment

Sends money from one account to another

Sends money from one account to another

*/
type MakePayment struct {
	Context *middleware.Context
	Handler MakePaymentHandler
}

func (o *MakePayment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMakePaymentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
